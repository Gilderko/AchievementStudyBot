// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PV178StudyBotDAL;

namespace PV178StudyBotDAL.Migrations
{
    [DbContext(typeof(PV178StudyBotDbContext))]
    partial class PV178StudyBotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Achievement", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Description = "Login into the achievement system.",
                            Name = "Good Start",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 2m,
                            Description = " Visit the third seminar.",
                            Name = "Qualifier",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 3m,
                            Description = "First answer to a relevant question in seminar.",
                            Name = "First Blood",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 4m,
                            Description = "First question in seminar.",
                            Name = "Curious",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 5m,
                            Description = "Write a relevant post in the discussion forum, or discord channel.",
                            Name = "Yes, We Have a Forum",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 6m,
                            Description = "Create at least four unit tests in your homework.",
                            Name = "See Sharp",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 7m,
                            Description = "Visit 6 consecutive seminars.",
                            Name = "Fanatic",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 8m,
                            Description = "Do not arrive late to a seminar.",
                            Name = "Not Too Late",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 9m,
                            Description = "Do not arrive late to any seminar.",
                            Name = "Never Too Late",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 10m,
                            Description = "Visit another seminar group.",
                            Name = "Guest on a Quest",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 11m,
                            Description = "Invited friend visited your seminar group.",
                            Name = "Recruiter",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 12m,
                            Description = "Correctly answers at least 2 test questionnaires on the first attempt.",
                            Name = "Lucker",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 13m,
                            Description = "Open and correctly answer all test questionnaires.",
                            Name = "Armed & Ready",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 14m,
                            Description = "In your third homework create additional song for the game and submit it with the homework.",
                            Name = "Mozart",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 15m,
                            Description = "Gain at least 90% points from the fourth homework.",
                            Name = "Shark Expert",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 16m,
                            Description = "Submit fifth homework at least 2 days before the deadline and get at least 80% points.",
                            Name = "Fast Logger",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 17m,
                            Description = "Get a full score from a homework at least 3 times.",
                            Name = "Half-perfectionist",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 18m,
                            Description = "Present a complete project.",
                            Name = "Bullseye",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 19m,
                            Description = "Make a project presentation with nice slides.",
                            Name = "Leonardo",
                            PointReward = 0
                        },
                        new
                        {
                            Id = 20m,
                            Description = "Get 54 points total.",
                            Name = "Skiller",
                            PointReward = 0
                        });
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Admin", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.ConnectionTables.StudentAndAchievement", b =>
                {
                    b.Property<decimal>("AchievementId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("StudentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("ReceivedWhen")
                        .HasColumnType("Date");

                    b.HasKey("AchievementId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAndAchievements");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Rank", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("AwardedTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ColorB")
                        .HasColumnType("int");

                    b.Property<int>("ColorG")
                        .HasColumnType("int");

                    b.Property<int>("ColorR")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            AwardedTitle = "Squire",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 0
                        },
                        new
                        {
                            Id = 2m,
                            AwardedTitle = "Initiate",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 5
                        },
                        new
                        {
                            Id = 3m,
                            AwardedTitle = "Knight",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 15
                        },
                        new
                        {
                            Id = 4m,
                            AwardedTitle = "Senior knight",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 32
                        },
                        new
                        {
                            Id = 5m,
                            AwardedTitle = "Paladin",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 42
                        },
                        new
                        {
                            Id = 6m,
                            AwardedTitle = "Elder",
                            ColorB = 0,
                            ColorG = 0,
                            ColorR = 0,
                            Description = "Lorem",
                            PointsRequired = 50
                        });
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Request", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<decimal>("AchievmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("StudentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TeacherId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AchievmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<int>("AcquiredPoints")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentRankId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("MyTeacherId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MyTeacherId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Teacher", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.ConnectionTables.StudentAndAchievement", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Student", "Student")
                        .WithMany("ReachedAchievements")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Request", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Achievement", "RequestedAchievement")
                        .WithMany()
                        .HasForeignKey("AchievmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Teacher", "Teacher")
                        .WithMany("UnresolvedRequests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedAchievement");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Teacher", "MyTeacher")
                        .WithMany("MyStudents")
                        .HasForeignKey("MyTeacherId");

                    b.Navigation("MyTeacher");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.Navigation("ReachedAchievements");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Teacher", b =>
                {
                    b.Navigation("MyStudents");

                    b.Navigation("UnresolvedRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
