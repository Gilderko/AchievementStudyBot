// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PV178StudyBotDAL;

namespace PV178StudyBotDAL.Migrations
{
    [DbContext(typeof(PV178StudyBotDbContext))]
    [Migration("20220211161958_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PointReward")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Get picked by your seminar tutor.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Starter.png",
                            Name = "Choose a starter",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 2,
                            Description = "First answer to a relevant question in seminar.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/FirstBlood.png",
                            Name = "First Blood",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 3,
                            Description = "First relevant question in seminar.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Curious.png",
                            Name = "Curious",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 4,
                            Description = "Do not arrive late to a seminar.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Nottoolate.png",
                            Name = "Not Too Late",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 5,
                            Description = "Write a relevant post in Discord.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Forum.png",
                            Name = "Yes, We Have a Forum",
                            PointReward = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Visit three seminars in a row.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Qualifier.png",
                            Name = "Qualifier",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 7,
                            Description = "Get full points from one test questionnaire.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Lucker.png",
                            Name = "Lucker",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 8,
                            Description = "Get full points from four test questionnaires.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Lucker.png",
                            Name = "Lucker 2.0",
                            PointReward = 15
                        },
                        new
                        {
                            Id = 9,
                            Description = "Come up with a new question for the test questionnaire",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Recruiter.png",
                            Name = "Recruiter",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 10,
                            Description = "Get at least 7 points from HW01.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/SeeSharp.png",
                            Name = "See Sharp I",
                            PointReward = 20
                        },
                        new
                        {
                            Id = 11,
                            Description = "Finish HW01 on Heroic mode.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/HW01.png",
                            Name = "Heroic Mode I",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 12,
                            Description = "Get at least 7 points from HW02.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/SeeSharp.png",
                            Name = "See Sharp II",
                            PointReward = 25
                        },
                        new
                        {
                            Id = 13,
                            Description = "Finish HW02 on Heroic mode.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/HW02.png",
                            Name = "Heroic Mode II",
                            PointReward = 15
                        },
                        new
                        {
                            Id = 14,
                            Description = "Get at least 9 points from HW03.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/SeeSharp.png",
                            Name = "See Sharp III",
                            PointReward = 30
                        },
                        new
                        {
                            Id = 15,
                            Description = "Finish HW03 on Heroic mode.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/SharkExpert.png",
                            Name = "Heroic Mode III",
                            PointReward = 20
                        },
                        new
                        {
                            Id = 16,
                            Description = "Get at least 9 points from HW04.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/SeeSharp.png",
                            Name = "See Sharp IV",
                            PointReward = 35
                        },
                        new
                        {
                            Id = 17,
                            Description = "Finish HW04 on Heroic mode.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/HW04.png",
                            Name = "Heroic Mode IV",
                            PointReward = 20
                        },
                        new
                        {
                            Id = 18,
                            Description = "Submit one homework at least 2 days before the deadline.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/FastExplorer.png",
                            Name = "Fast Explorer",
                            PointReward = 20
                        },
                        new
                        {
                            Id = 19,
                            Description = "Get full points from all test questionnaires.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/ArmedandReady.png",
                            Name = "Armed & Ready",
                            PointReward = 40
                        },
                        new
                        {
                            Id = 20,
                            Description = "Attend the first bonus lecture.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/GuestonQuest.png",
                            Name = "Guest on a Quest I",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 21,
                            Description = "Attend the second bonus lecture.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/GuestonQuest.png",
                            Name = "Guest on a Quest II",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 22,
                            Description = "Attend the third bonus lecture.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/GuestonQuest.png",
                            Name = "Guest on a Quest III",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 23,
                            Description = "Attend the fourth bonus lecture.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/GuestonQuest.png",
                            Name = "Guest on a Quest IV",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 24,
                            Description = "Attend the fifth bonus lecture.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/GuestonQuest.png",
                            Name = "Guest on a Quest V",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 26,
                            Description = "Do not arrive late to any seminar.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Nevertoolate.png",
                            Name = "Never Too Late",
                            PointReward = 25
                        },
                        new
                        {
                            Id = 27,
                            Description = "Miss maximum 1 seminar without a health reason.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Fanatic.png",
                            Name = "Fanatic",
                            PointReward = 35
                        },
                        new
                        {
                            Id = 28,
                            Description = "Use a technology that was not taught in this course in your project.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/General.png",
                            Name = "Leonardo",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 29,
                            Description = "Do not present your project longer than 5 minutes.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/General2.png",
                            Name = "Mozar",
                            PointReward = 10
                        },
                        new
                        {
                            Id = 30,
                            Description = "Get at least 20 points from the project.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Skiller.png",
                            Name = "Skiller",
                            PointReward = 25
                        },
                        new
                        {
                            Id = 31,
                            Description = "Submit your answers to the course survey.",
                            ImagePath = "https://www.fi.muni.cz/~xmacak1/badges/Bullseye.png",
                            Name = "Bullseye",
                            PointReward = 10
                        });
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Admin", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 317634903959142401ul
                        });
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.ConnectionTables.StudentAndAchievement", b =>
                {
                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<ulong>("StudentId")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("ReceivedWhen")
                        .HasColumnType("Date");

                    b.HasKey("AchievementId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAndAchievements");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Rank", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AwardedTitle")
                        .HasColumnType("longtext");

                    b.Property<float>("ColorB")
                        .HasColumnType("float");

                    b.Property<float>("ColorG")
                        .HasColumnType("float");

                    b.Property<float>("ColorR")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("PointsRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AchievmentId")
                        .HasColumnType("int");

                    b.Property<ulong>("StudentId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("TeacherId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AchievmentId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("AcquiredPoints")
                        .HasColumnType("int");

                    b.Property<ulong>("CurrentRankId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong?>("MyTeacherId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("OnRegisterName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRankId");

                    b.HasIndex("MyTeacherId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Teacher", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.ConnectionTables.StudentAndAchievement", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Student", "Student")
                        .WithMany("ReachedAchievements")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Request", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Achievement", "RequestedAchievement")
                        .WithMany()
                        .HasForeignKey("AchievmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Student", "Student")
                        .WithMany("MyRequests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Teacher", "Teacher")
                        .WithMany("UnresolvedRequests")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestedAchievement");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.HasOne("PV178StudyBotDAL.Entities.Rank", "CurrentRank")
                        .WithMany()
                        .HasForeignKey("CurrentRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PV178StudyBotDAL.Entities.Teacher", "MyTeacher")
                        .WithMany("MyStudents")
                        .HasForeignKey("MyTeacherId");

                    b.Navigation("CurrentRank");

                    b.Navigation("MyTeacher");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Student", b =>
                {
                    b.Navigation("MyRequests");

                    b.Navigation("ReachedAchievements");
                });

            modelBuilder.Entity("PV178StudyBotDAL.Entities.Teacher", b =>
                {
                    b.Navigation("MyStudents");

                    b.Navigation("UnresolvedRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
